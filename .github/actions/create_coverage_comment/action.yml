name: "Create Coverage PR Comment"
description: >
  Build a markdown comment to be posted to a PR by the "comment_pr" workflow.
  If threshold is set, fails the build if the reported coverage does not meet
  met expected criteria.
  Uploads the created markdown comment and the number of the PR that triggered this action as workflow artifacts.
inputs:
  threshold:
    description: >
      Minimum proportion of modified lines that need to be covered for acceptance or -1 if there is no minimum.
    required: false
    default: "-1"
  report-artifact-prefix:
    description: "Prefix of the name of the artifact to be downloaded"
    required: false
    default: "coverage_report"
  comment-artifact-name:
    description: "Name of the artifact to be uploaded"
    required: false
    default: "coverage_comment"

runs:
  using: "composite"
  steps:
    - name: Download report artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: ${{ inputs.report-artifact-prefix }}_cobertura
    - name: Compute changed lines
      id: changed_lines
      uses: hestonhoffman/changed-lines@b51e5eff3b7f56b60460c5371206e1d781ffa6ab # v1.9
      with:
        file_filter: ".rs"
    - name: Set up python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: 3.13
    - name: Find last nightly run for BASE
      shell: bash
      run: |
        gh run list \
          --commit $BASE_SHA \
          --status "success" \
          --workflow  "Nightly Build" \
          --limit 1 \
          --json "databaseId" \
          | jq --raw-output '.[0]["databaseId"]' \
          > base_run_id.txt
        echo "BASE_RUN_ID=$(cat base_run_id.txt)" >> $GITHUB_ENV
      env:
        BASE_SHA: ${{ github.event.pull_request.base.sha }}
        GH_TOKEN: ${{ github.token }}
    - name: Find coverage report for BASE
      if: ${{ env.BASE_RUN_ID != 'null' }}
      shell: bash
      run: |
        mkdir -p base_coverage
        gh run download $BASE_RUN_ID --name $NAME --dir base_coverage || true
      env:
        NAME: ${{ inputs.report-artifact-prefix }}_cobertura
        GH_TOKEN: ${{ github.token }}
    - name: Create result files
      shell: bash
      run: |
        mkdir -p target/coverage/results
        echo $ISSUE_NUMBER > target/coverage/results/issue_number.txt
        echo $CHANGED_LINES > target/coverage/results/changed_lines.json
        python .github/scripts/process_coverage.py \
          cobertura.xml \
          target/coverage/results/changed_lines.json \
          $THRESHOLD \
          $HEAD_SHA \
          $BASE_SHA \
          $(cat report_location.txt) \
          base_coverage/cobertura.xml \
          target/coverage/results
        echo "STATUS=$(cat target/coverage/results/status.txt)" >> $GITHUB_ENV
      env:
        CHANGED_LINES: ${{ steps.changed_lines.outputs.changed_lines }}
        THRESHOLD: ${{ inputs.threshold }}
        ISSUE_NUMBER: ${{ github.event.number }}
        HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        BASE_SHA: ${{ github.event.pull_request.base.sha }}
    - name: Upload results
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ inputs.comment-artifact-name }}
        path: target/coverage/results/
        retention-days: 1
    - name: Check status
      if: ${{ env.STATUS == 'FAILED' }}
      uses: actions/github-script@ffc2c79a5b2490bd33e0a41c1de74b877714d736 # v3.2.0
      with:
        script: |
          core.setFailed('Required coverage criteria were not met.')
