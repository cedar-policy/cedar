syntax = "proto3";
package cedar_policy_core;

message Request {
    EntityUidEntry principal = 1;
    EntityUidEntry action = 2;
    EntityUidEntry resource = 3;
    Context context = 4;
}

message LiteralPolicySet {
    // Key is PolicyID as a string
    map<string, TemplateBody> templates = 1;
    map<string, LiteralPolicy> links = 2;
}

enum Mode {
    Concrete = 0;
    Partial = 1;
}

message Entities {
    repeated Entity entities = 1;
    Mode mode = 3;
}

message Context {
    Expr context = 1;
}

// BEGIN REQUEST MESSAGES

message EntityUidEntry {
    EntityUid euid = 2;
    Loc loc = 3;
}

message EntityUid {
    EntityType ty = 1;
    string eid = 2;
    Loc loc = 3;
}

message EntityType {
    Name name = 2;
}

// alias Id = string
message Name {
    string id = 1;
    repeated string path = 2;
    Loc loc = 3;
}

message Loc {
    uint32 offset = 1;
    uint32 length = 2;
    string src = 3;
}


// END REQUEST MESSAGES


// BEGIN POLICYSET MESSAGES

message LiteralPolicy {
    string template_id = 1;
    string link_id = 2;
    bool link_id_specified = 3;
    // map<SlotId, EntityUid> is not allowed since keys in map
    // fields cannot be enum types
    // map<SlotId, EntityUid> values = 4;
    EntityUid principal_euid = 4;
    EntityUid resource_euid = 5;
}

message Annotation {
    string val = 1;
    Loc loc = 2;
}

enum Effect {
    Forbid = 0;
    Permit = 1;
}

message TemplateBody {
    string id = 1;
    Loc loc = 2;
    // alias AnyId = string
    // alias Annotations = map<AnyId, Annotation>
    map<string, Annotation> annotations = 4;
    Effect effect = 5;
    PrincipalConstraint principal_constraint = 6;
    ActionConstraint action_constraint = 7;
    ResourceConstraint resource_constraint = 8;
    Expr non_scope_constraints = 9;
}

message PrincipalConstraint {
    PrincipalOrResourceConstraint constraint = 1;
}

message ResourceConstraint {
    PrincipalOrResourceConstraint constraint = 1;
}

message EntityReference {
    oneof data {
        Ty ty = 1;
        EntityUid euid = 2;
    }

    // Zero-Arity constructors
    enum Ty {
        Slot = 0;
    }
}

message PrincipalOrResourceConstraint {

    oneof data {
        Ty ty = 1;
        InMessage in = 2;
        EqMessage eq = 3;
        IsMessage is = 4;
        IsInMessage isIn = 5;
    }

    // Zero-arity constructors
    enum Ty {
        Any = 0;
    }

    message InMessage {
        EntityReference er = 1;
    }
    message EqMessage {
        EntityReference er = 1;
    }
    message IsMessage {
        EntityType et = 1;
    }
    message IsInMessage {
        EntityReference er = 1;
        EntityType et = 2;
    }
}

enum SlotId {
    Principal = 0;
    Resource = 1;
}

message ActionConstraint {
    ActionConstraintType ty = 1;
    repeated EntityUid euids = 2;
    EntityUid euid = 3;

    enum ActionConstraintType {
        Any = 0;
        In = 1; // Expects repeated EntityUid
        Eq = 2; // Expects EntityUid
    }
}

message Expr {
    ExprKind expr_kind = 1;
    Loc source_loc = 2;
    // Ignoring data for now

    message ExprKind {
        ExprKindType ty = 1;
        Literal lit = 2;
        Var var = 3;
        SlotId slot = 4;
        Unknown unknown = 5;
        UnaryOp uop = 11;
        BinaryOp bop = 13;
        Name fn_name = 16;
        repeated Expr args = 17;
        string attr = 19;
        // alias Patterns = repeated PatternElem
        repeated PatternElem pattern = 20;
        EntityType entity_type = 21;
        map<string, Expr> record = 22;

        enum ExprKindType {
            na_ekt = 0;
            Lit = 1; // Expects (lit: Literal)
            VarTy = 2; // Expects (var: Var)
            Slot = 3; // Expects (slot: SlotId)
            UnknownTy = 4; // Expects (unknown: Unknown)
            If = 5; // Expects (args: repeated Expr)
            And = 6; // Expects (args: repeated Expr)
            Or = 7; // Expects (args: repeated Expr)
            UnaryApp = 8; // Expects (op: UnaryOp, args: repeated Expr)
            BinaryApp = 9; // Expects (op: BinaryOp, args: repeated Expr)
            ExtensionFunctionApp = 10; // Expects (fn_name: Name, args: repeated Expr)
            GetAttr = 11; // Expects (args: repeated Expr, attr: string)
            HasAttr = 12; // Expects (args: repeated Expr, attr: string)
            Like = 13; // Expects (args: repeated Expr, pattern: Pattern)
            Is = 14; // Expects (args: repeated Expr, entity_type: EntityType)
            Set = 15; // Expects (args: repeated Expr)
            Record = 16; // Expects (record: map<string, Expr>)
        }

        message Literal {
            oneof lit {
                bool b = 2;
                int64 i = 3;
                string s = 4;
                EntityUid euid = 5;
            }
        }

        enum Var {
            Principal = 0;
            Action = 1;
            Resource = 2;
            CONTEXT = 3;
        }

        message Unknown {
            string name = 1;
            Type type_annotation = 2;

            message Type {
                TypeType ty = 1;
                EntityType ety = 2;
                Name name = 3;

                enum TypeType {
                    Bool = 0;
                    Long = 1;
                    String = 2;
                    Set = 3;
                    Record = 4;
                    Entity = 5; // Expects (ety: EntityType)
                    Extension = 6; // Expects (name: Name)
                }
            }
        }

        enum UnaryOp {
            na_uop = 0;
            Not = 1;
            Neg = 2;
        }

        enum BinaryOp {
            na_bop = 0;
            Eq = 1;
            Less = 2;
            LessEq = 3;
            Add = 4;
            Sub = 5;
            Mul = 6;
            In = 7;
            Contains = 8;
            ContainsAll = 9;
            ContainsAny = 10;
        }

        message PatternElem {
            PatternElemType ty = 1;
            string c = 2;

            enum PatternElemType {
                Wildcard = 0;
                Char = 1; // Expects (c: char)
            }
        }
    } // END ExprKind
} // END Expr

// END POLICYSET MESSAGES


// ENTER ENTITITES MESSAGES

message Entity {
    EntityUid uid = 1;
    map<string, Expr> attrs = 2;
    repeated EntityUid ancestors = 3;
}

// END ENTITITES MESSAGES
