use std::str::FromStr;
use std::sync::Arc;
use crate::custom_schema::err::{RawErrorRecovery, RawUserError};
use cedar_policy_core::parser::{Node, Loc, unescape::to_unescaped_string};
use cedar_policy_core::ast::Id;
use crate::custom_schema::ast::{Name as SName, Ident as SIdent, Path as SPath, EntityDecl, Declaration, Namespace, Schema as ASchema, Type as SType, AttrDecl, ActionDecl, PR, AppDecl, PRAppDecl};
use nonempty::{NonEmpty, nonempty};
use itertools::Either;

use lalrpop_util::{ParseError, ErrorRecovery};

/// `errors` collects generated errors.
///
/// `src` is the (full) original source being parsed, which the source locations l,r index into.
grammar<'err, 's>(errors: &'err mut Vec<RawErrorRecovery<'input>>, src: &'s Arc<str>);

extern {
    type Error = RawUserError;
}

// New tokens should be reflected in the `FRIENDLY_TOKEN_NAMES` map in err.rs.
match {
    // Whitespace and comments
    r"\s*" => { }, // The default whitespace skipping is disabled an `ignore pattern` is specified
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`

    // keywords
    "namespace" => NAMESPACE,
    "entity" => ENTITY,
    "in" => IN,
    "type" => TYPE,
    "Set" => SET,
    "appliesTo" => APPLIESTO,
    "principal" => PRINCIPAL,
    "action" => ACTION,
    "resource" => RESOURCE,
    "context" => CONTEXT,
    "attributes" => ATTRIBUTES,

    // types
    "Bool" => TYBOOL,
    "Long" => TYLONG,
    "String" => TYSTRING,

    // data input
    r"[_a-zA-Z][_a-zA-Z0-9]*" => IDENTIFIER,
    // The `NUMBER` token is a positive integer.
    // Negative number literals are negation operations.
    r"[0-9]+" => NUMBER,
    r#""(\\.|[^"\\])*""# => STRINGLIT,

    // other tokens
    ",", ";", ":", "::", "{", "}", "[", "]",
    "<", ">", "=", "?",

}

Comma<E>: Vec<E> = {
    <e:E?> => e.into_iter().collect(),
    <mut es:(<E> ",")+> <e:E> => {
        es.push(e);
        es
    },
}

// IDENT := ['_''a'-'z''A'-'Z']['_''a'-'z''A'-'Z''0'-'9']* - PRIMTYPE
Ident: SIdent = {
    <l:@L> NAMESPACE <r:@R>
        => Node::with_source_loc("namespace".parse().unwrap(), Loc::new(l..r, Arc::clone(src))),
    <l:@L> ENTITY <r:@R>
        => Node::with_source_loc("entity".parse().unwrap(), Loc::new(l..r, Arc::clone(src))),
    <l:@L> IN <r:@R>
        => Node::with_source_loc("in".parse().unwrap(), Loc::new(l..r, Arc::clone(src))),
    <l:@L> SET <r:@R>
        => Node::with_source_loc("set".parse().unwrap(), Loc::new(l..r, Arc::clone(src))),
    <l:@L> APPLIESTO <r:@R>
        => Node::with_source_loc("appliesTo".parse().unwrap(), Loc::new(l..r, Arc::clone(src))),
    <l:@L> PRINCIPAL <r:@R>
        => Node::with_source_loc("principal".parse().unwrap(), Loc::new(l..r, Arc::clone(src))),
    <l:@L> ACTION <r:@R>
        => Node::with_source_loc("action".parse().unwrap(), Loc::new(l..r, Arc::clone(src))),
    <l:@L> RESOURCE <r:@R>
        => Node::with_source_loc("resource".parse().unwrap(), Loc::new(l..r, Arc::clone(src))),
    <l:@L> CONTEXT <r:@R>
        => Node::with_source_loc("context".parse().unwrap(), Loc::new(l..r, Arc::clone(src))),
    <l:@L> ATTRIBUTES <r:@R>
        => Node::with_source_loc("attributes".parse().unwrap(), Loc::new(l..r, Arc::clone(src))),
    <l:@L> <i:IDENTIFIER> <r:@R>
        => Node::with_source_loc(i.parse().unwrap(), Loc::new(l..r, Arc::clone(src))),
}

// Name := IDENT | STR
Name: SName = {
   <id: Ident> => Either::Left(id),
   <l:@L> <s:STRINGLIT> <r:@R>
        =>? to_unescaped_string(&s[1..(s.len() - 1)]).map_or_else(|e| Err(ParseError::User {
            error: Node::with_source_loc(format!("invalid escape sequence: {e:?}"), Loc::new(l..r, Arc::clone(src))),
        }), |v| Ok(Either::Right(Node::with_source_loc(v, Loc::new(l..r, Arc::clone(src)))))),
}

// Path := IDENT {'::' IDENT}
Path: Node<SPath> = {
    <l:@L> <i:Ident> <r:@R>
        => Node::with_source_loc(SPath {base: i, prefix: vec![]}, Loc::new(l..r, Arc::clone(src))),
    <l:@L> <is:(<Ident> "::")+> <i:Ident> <r:@R>
        => Node::with_source_loc(SPath {base: i, prefix: is}, Loc::new(l..r, Arc::clone(src))),
}

// Idents := IDENT {',' IDENT}
Idents: Vec<SIdent> = {
    <i:Ident> => vec![i],
    <mut is:(<Ident> ",")+> <i:Ident> => {
        is.push(i);
        is
    },
}

// Names := Name {',' Name}
Names: Vec<SName> = {
    <n:Name> => vec![n],
    <mut ns:(<Name> ",")+> <n:Name> => {
        ns.push(n);
        ns
    },
}

// PRIMTYPE := 'Long' | 'String' | 'Bool'
// SetType := 'Set' '<' Type '>'
// RecType := '{' [AttrDecls] '}'
// Type := PRIMTYPE | Path | SetType | RecType
Type: Node<SType> = {
    <l:@L> TYBOOL <r:@R>
        => Node::with_source_loc(SType::Bool, Loc::new(l..r, Arc::clone(src))),
    <l:@L> TYSTRING <r:@R>
        => Node::with_source_loc(SType::String, Loc::new(l..r, Arc::clone(src))),
    <l:@L> TYLONG <r:@R>
        => Node::with_source_loc(SType::Long, Loc::new(l..r, Arc::clone(src))),
    <p:Path>
        => p.map(|n| SType::Ident(n)),
    <l:@L> SET "<" <t:Type> ">" <r:@R>
        => Node::with_source_loc(SType::Set(Box::new(t)), Loc::new(l..r, Arc::clone(src))),
    <l:@L> "{" <ds:AttrDecls?> "}" <r:@R>
        => Node::with_source_loc(SType::Record(ds.unwrap_or_default()), Loc::new(l..r, Arc::clone(src))),
}

// AttrDecls := Name ['?'] ':' Type [',' | ',' AttrDecls]
AttrDecls: Vec<Node<AttrDecl>> = {
    <l:@L> <name: Name> <required:"?"?> ":" <ty:Type> ","? <r:@R>
        => vec![Node::with_source_loc(AttrDecl { name, required: required.map(|_| ()), ty}, Loc::new(l..r, Arc::clone(src)))],
    <l:@L> <name: Name> <required:"?"?> ":" <ty:Type> "," <r:@R> <mut ds: AttrDecls>
        => {ds.insert(0, Node::with_source_loc(AttrDecl { name, required: required.map(|_| ()), ty}, Loc::new(l..r, Arc::clone(src)))); ds},
}

PrincipalOrResource: Node<PR> = {
    <l:@L> PRINCIPAL <r:@R> => Node::with_source_loc(PR::Principal, Loc::new(l..r, Arc::clone(src))),
    <l:@L> RESOURCE <r:@R> => Node::with_source_loc(PR::Resource, Loc::new(l..r, Arc::clone(src))),
}

// AppDecls := ('principal' | 'resource') ':' EntOrTyps [',' | ',' AppDecls]
//          | 'context' ':' RecType [',' | ',' AppDecls]
AppDecls: NonEmpty<Node<AppDecl>> = {
    <l:@L> <pr: PrincipalOrResource> ":" <ets:EntTypes> ","? <r:@R>
        =>? 
            NonEmpty::collect(ets.into_iter()).map(|ets| nonempty![Node::with_source_loc(AppDecl::PR(PRAppDecl { ty:pr, entity_tys: ets}), Loc::new(l..r, Arc::clone(src)))]).ok_or(ParseError::User {
                error: Node::with_source_loc(format!("empty entity type list"), Loc::new(l..r, Arc::clone(src)))}),
    <l:@L> <pr: PrincipalOrResource> ":" <ets:EntTypes> "," <r:@R> <mut ds: AppDecls>
        =>? 
            NonEmpty::collect(ets.into_iter()).map(|ets| {ds.insert(0, Node::with_source_loc(AppDecl::PR(PRAppDecl { ty:pr, entity_tys: ets}), Loc::new(l..r, Arc::clone(src)))); ds}).ok_or(ParseError::User {
                error: Node::with_source_loc(format!("empty entity type list"), Loc::new(l..r, Arc::clone(src)))}),
    <l:@L> CONTEXT ":" "{" <attrs:AttrDecls?> "}" ","? <r:@R>
        => nonempty![Node::with_source_loc(AppDecl::Context(attrs.unwrap_or_default()), Loc::new(l..r, Arc::clone(src)))],
    <l:@L> CONTEXT ":" "{" <attrs:AttrDecls?> "}" "," <r:@R> <mut ds: AppDecls>
        => {ds.insert(0, Node::with_source_loc(AppDecl::Context(attrs.unwrap_or_default()), Loc::new(l..r, Arc::clone(src)))); ds},
}

// EntType   := Path
// EntTypes  := Path {',' Path}
// EntOrTyps := EntType | '[' [EntTypes] ']'
EntTypes: Vec<Node<SPath>> = {
    <et: Path>
        => vec![et],
    "[" <ets: Comma<Path>> "]"
        => ets,
}

NameOrNames: Vec<SName> = {
    <n:Name> => vec![n],
    "[" <ns:Comma<Name>> "]" => ns,
}

// Decl := Entity | Action | TypeDecl
// Entity := 'entity' Idents ['in' EntOrTyps] [['='] '{' [AttrDecls] '}'] ';'
// AppliesTo := 'appliesTo' '{' AppDecls '}'
// ActAttrs  := 'attributes' '{' AttrDecls '}'
// Action := 'action' Names ['in' (Name | '[' [Names] ']')] [AppliesTo] [ActAttrs]';'
// TypeDecl := 'type' IDENT '=' Type ';'
Decl: Node<Declaration> = {
    <l:@L> ENTITY <ets: Idents> <ps:(IN <EntTypes>)?> <ds:("="? "{" <AttrDecls?> "}")?> ";" <r:@R>
        => Node::with_source_loc(Declaration::Entity(EntityDecl { names: ets, member_of_types: ps, attrs: ds.map(|ds| ds.unwrap_or_default()).unwrap_or_default()}), Loc::new(l..r, Arc::clone(src))),
    <l:@L> ACTION <ns:Names> <ps:(IN <NameOrNames>)?> <ads:(APPLIESTO "{" <AppDecls> "}")?> <attrs:(ATTRIBUTES "{" <AttrDecls> "}")?>";" <r:@R>
        => Node::with_source_loc(Declaration::Action(ActionDecl { names: ns, parents: ps, app_decls: ads, attrs: attrs.unwrap_or_default()}), Loc::new(l..r, Arc::clone(src))),
    <l:@L> TYPE <i:Ident> "=" <t:Type> ";" <r:@R>
        => Node::with_source_loc(Declaration::Type(i, t), Loc::new(l..r, Arc::clone(src))),
}

// "named" space
// Namespace := 'namespace' Path '{' {Decl} '}'
Namespace: Node<Namespace> = {
    <l:@L> NAMESPACE <p: Path> "{" <decls: Decl*> "}" <r:@R>
        => Node::with_source_loc(Namespace { name: Some(p), decls}, Loc::new(l..r, Arc::clone(src))),
}

// Schema := {Namespace} | Decl {Decl}
pub Schema: ASchema = {
    <ns: Namespace*> => ns,
    <l:@L> <decls: Decl+> <r:@R> => vec![Node::with_source_loc(Namespace {name: None, decls}, Loc::new(l..r, Arc::clone(src)))],
}
