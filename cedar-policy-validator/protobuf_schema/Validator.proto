//
// Copyright Cedar Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";
package cedar_policy_validator;

import "AST.proto";

message ValidatorSchema {
    repeated EntityTypeWithTypesMap entity_types = 1;
    repeated EntityUidWithActionIdsMap action_ids = 2;
}

// Workaround since messages can't be dictionary keys
message EntityTypeWithTypesMap {
    cedar_policy_core.EntityType key = 1;
    ValidatorEntityType value = 2;
}

message EntityUidWithActionIdsMap {
    cedar_policy_core.EntityUid key = 1;
    ValidatorActionId value = 2;
}

message ValidatorEntityType {
    cedar_policy_core.EntityType name = 1;
    repeated cedar_policy_core.EntityType descendants = 2;
    Attributes attributes = 3;
    OpenTag open_attributes = 4;
    Tag tags = 5;
}

message ValidatorActionId {
    cedar_policy_core.EntityUid name = 1;
    ValidatorApplySpec applies_to = 2;
    repeated cedar_policy_core.EntityUid descendants = 3;
    Type context = 4;
    Attributes attribute_types = 5;
    // Deserialize Expr as Value
    map<string, cedar_policy_core.Expr> attributes = 6;
}

message ValidatorApplySpec {
    repeated cedar_policy_core.EntityType principal_apply_spec = 1;
    repeated cedar_policy_core.EntityType resource_apply_spec = 2;
}

message Type {
    oneof data {
        Ty ty = 1;
        Type set_type = 2;
        EntityRecordKind entityOrRecord = 3;
        cedar_policy_core.Name name = 4;
    }

    enum Ty {
        Never = 0;
        True = 1;
        False = 2;
        EmptySetType = 3;
        Bool = 4;
        String = 5;
        Long = 6;
    }
}

message EntityRecordKind {
    oneof data {
        Ty ty = 1;
        Record record = 2;
        Entity entity = 3;
        ActionEntity actionEntity = 4;
    }

    enum Ty {
        AnyEntity = 0; // AnyEntity
    }
    message Record {
        Attributes attrs = 1;
        OpenTag open_attributes = 2;
    }
    message Entity {
        cedar_policy_core.EntityType e = 1;
    }
    message ActionEntity {
        cedar_policy_core.EntityType name = 1;
        Attributes attrs = 2;
    }
}

enum OpenTag {
        OpenAttributes = 0;
        ClosedAttributes = 1;
}

message Attributes {
    map<string, AttributeType> attrs = 1;
}

message AttributeType {
    Type attr_type = 1;
    bool is_required = 2;
}

message Tag {
    oneof optional_type {
        Type type = 1;
    }
}

enum ValidationMode {
    Strict = 0;
    Permissive = 1;
}
